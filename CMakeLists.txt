cmake_minimum_required(VERSION 3.10)

# set the project name
project(Terminal3D)

# set the project name and version
project(${PROJECT_NAME} VERSION 0.1)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/output/")

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)

set(CMAKE_UNITY_BUILD False)

set(INCLUDES_DIR "${PROJECT_SOURCE_DIR}/includes/")
set(SOURCE_DIR "${PROJECT_SOURCE_DIR}/src/")

file(GLOB_RECURSE INCLUDES_DIR_RECURSE "${INCLUDES_DIR}/*.h")
file(GLOB_RECURSE SOURCE_DIR_RECURSE "${SOURCE_DIR}/*.cpp")

set(PLATFORM_DEPENDENT_DIR "${SOURCE_DIR}/${PROJECT_NAME}/PlatformDependent/")

list(FILTER SOURCE_DIR_RECURSE EXCLUDE REGEX "^${PLATFORM_DEPENDENT_DIR}")

if(WIN32)
	set(CURRENT_PLATFORM Windows)
elseif(APPLE)
	set(CURRENT_PLATFORM MacOS)
elseif(UNIX)
	set(CURRENT_PLATFORM Unix)
endif()

file(GLOB_RECURSE PLATFORM_DEPENDENT_SOURCE_FILES "${PLATFORM_DEPENDENT_DIR}/${CURRENT_PLATFORM}/*.cpp")
list(APPEND SOURCE_DIR_RECURSE ${PLATFORM_DEPENDENT_SOURCE_FILES})

# add the executable
add_executable(${PROJECT_NAME} main.cpp ${INCLUDES_DIR_RECURSE} ${SOURCE_DIR_RECURSE})

target_include_directories(${PROJECT_NAME} PUBLIC ${INCLUDES_DIR})
target_sources(${PROJECT_NAME} PRIVATE ${SOURCE_DIR_RECURSE})

source_group(TREE ${PROJECT_SOURCE_DIR} FILES ${INCLUDES_DIR_RECURSE})
source_group(TREE ${PROJECT_SOURCE_DIR} FILES ${SOURCE_DIR_RECURSE})

#target_link_libraries(${PROJECT_NAME} PUBLIC ncurses)

configure_file(${PROJECT_NAME}Config.h.in "${INCLUDES_DIR}/${PROJECT_NAME}Config.h")